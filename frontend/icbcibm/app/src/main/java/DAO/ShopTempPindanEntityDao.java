package DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bean.ShopTempPindanEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_TEMP_PINDAN_ENTITY".
*/
public class ShopTempPindanEntityDao extends AbstractDao<ShopTempPindanEntity, Long> {

    public static final String TABLENAME = "SHOP_TEMP_PINDAN_ENTITY";

    /**
     * Properties of entity ShopTempPindanEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ShopId = new Property(1, long.class, "shopId", false, "SHOP_ID");
        public final static Property Partner_info = new Property(2, int.class, "partner_info", false, "PARTNER_INFO");
        public final static Property Pindan_price = new Property(3, int.class, "pindan_price", false, "PINDAN_PRICE");
        public final static Property Hour = new Property(4, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(5, int.class, "minute", false, "MINUTE");
        public final static Property Benefit_classfication = new Property(6, int.class, "benefit_classfication", false, "BENEFIT_CLASSFICATION");
        public final static Property UserId = new Property(7, long.class, "userId", false, "USER_ID");
    }


    public ShopTempPindanEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ShopTempPindanEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_TEMP_PINDAN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SHOP_ID\" INTEGER NOT NULL ," + // 1: shopId
                "\"PARTNER_INFO\" INTEGER NOT NULL ," + // 2: partner_info
                "\"PINDAN_PRICE\" INTEGER NOT NULL ," + // 3: pindan_price
                "\"HOUR\" INTEGER NOT NULL ," + // 4: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 5: minute
                "\"BENEFIT_CLASSFICATION\" INTEGER NOT NULL ," + // 6: benefit_classfication
                "\"USER_ID\" INTEGER NOT NULL );"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_TEMP_PINDAN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopTempPindanEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getShopId());
        stmt.bindLong(3, entity.getPartner_info());
        stmt.bindLong(4, entity.getPindan_price());
        stmt.bindLong(5, entity.getHour());
        stmt.bindLong(6, entity.getMinute());
        stmt.bindLong(7, entity.getBenefit_classfication());
        stmt.bindLong(8, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopTempPindanEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getShopId());
        stmt.bindLong(3, entity.getPartner_info());
        stmt.bindLong(4, entity.getPindan_price());
        stmt.bindLong(5, entity.getHour());
        stmt.bindLong(6, entity.getMinute());
        stmt.bindLong(7, entity.getBenefit_classfication());
        stmt.bindLong(8, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShopTempPindanEntity readEntity(Cursor cursor, int offset) {
        ShopTempPindanEntity entity = new ShopTempPindanEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // shopId
            cursor.getInt(offset + 2), // partner_info
            cursor.getInt(offset + 3), // pindan_price
            cursor.getInt(offset + 4), // hour
            cursor.getInt(offset + 5), // minute
            cursor.getInt(offset + 6), // benefit_classfication
            cursor.getLong(offset + 7) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopTempPindanEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setShopId(cursor.getLong(offset + 1));
        entity.setPartner_info(cursor.getInt(offset + 2));
        entity.setPindan_price(cursor.getInt(offset + 3));
        entity.setHour(cursor.getInt(offset + 4));
        entity.setMinute(cursor.getInt(offset + 5));
        entity.setBenefit_classfication(cursor.getInt(offset + 6));
        entity.setUserId(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopTempPindanEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopTempPindanEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopTempPindanEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
