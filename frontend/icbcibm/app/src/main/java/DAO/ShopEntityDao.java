package DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bean.ShopEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_ENTITY".
*/
public class ShopEntityDao extends AbstractDao<ShopEntity, Long> {

    public static final String TABLENAME = "SHOP_ENTITY";

    /**
     * Properties of entity ShopEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ImageId = new Property(1, int.class, "imageId", false, "IMAGE_ID");
        public final static Property Shop_name = new Property(2, String.class, "shop_name", false, "SHOP_NAME");
        public final static Property Shop_score = new Property(3, double.class, "shop_score", false, "SHOP_SCORE");
        public final static Property Distance_desc = new Property(4, double.class, "distance_desc", false, "DISTANCE_DESC");
        public final static Property Price_limit_desc = new Property(5, double.class, "price_limit_desc", false, "PRICE_LIMIT_DESC");
        public final static Property Price_trans_desc = new Property(6, double.class, "price_trans_desc", false, "PRICE_TRANS_DESC");
        public final static Property Shop_pinNumber = new Property(7, int.class, "shop_pinNumber", false, "SHOP_PIN_NUMBER");
        public final static Property Sale_number = new Property(8, int.class, "sale_number", false, "SALE_NUMBER");
        public final static Property Classification = new Property(9, int.class, "classification", false, "CLASSIFICATION");
        public final static Property Arrival_time = new Property(10, int.class, "arrival_time", false, "ARRIVAL_TIME");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property PhoneNumber = new Property(12, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property BusinessTime = new Property(13, String.class, "businessTime", false, "BUSINESS_TIME");
        public final static Property BriefIntroduction = new Property(14, String.class, "briefIntroduction", false, "BRIEF_INTRODUCTION");
        public final static Property Benefit = new Property(15, String.class, "benefit", false, "BENEFIT");
        public final static Property Shop_star_imagineId = new Property(16, int.class, "shop_star_imagineId", false, "SHOP_STAR_IMAGINE_ID");
    }


    public ShopEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ShopEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"IMAGE_ID\" INTEGER NOT NULL ," + // 1: imageId
                "\"SHOP_NAME\" TEXT," + // 2: shop_name
                "\"SHOP_SCORE\" REAL NOT NULL ," + // 3: shop_score
                "\"DISTANCE_DESC\" REAL NOT NULL ," + // 4: distance_desc
                "\"PRICE_LIMIT_DESC\" REAL NOT NULL ," + // 5: price_limit_desc
                "\"PRICE_TRANS_DESC\" REAL NOT NULL ," + // 6: price_trans_desc
                "\"SHOP_PIN_NUMBER\" INTEGER NOT NULL ," + // 7: shop_pinNumber
                "\"SALE_NUMBER\" INTEGER NOT NULL ," + // 8: sale_number
                "\"CLASSIFICATION\" INTEGER NOT NULL ," + // 9: classification
                "\"ARRIVAL_TIME\" INTEGER NOT NULL ," + // 10: arrival_time
                "\"ADDRESS\" TEXT," + // 11: address
                "\"PHONE_NUMBER\" TEXT," + // 12: phoneNumber
                "\"BUSINESS_TIME\" TEXT," + // 13: businessTime
                "\"BRIEF_INTRODUCTION\" TEXT," + // 14: briefIntroduction
                "\"BENEFIT\" TEXT," + // 15: benefit
                "\"SHOP_STAR_IMAGINE_ID\" INTEGER NOT NULL );"); // 16: shop_star_imagineId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getImageId());
 
        String shop_name = entity.getShop_name();
        if (shop_name != null) {
            stmt.bindString(3, shop_name);
        }
        stmt.bindDouble(4, entity.getShop_score());
        stmt.bindDouble(5, entity.getDistance_desc());
        stmt.bindDouble(6, entity.getPrice_limit_desc());
        stmt.bindDouble(7, entity.getPrice_trans_desc());
        stmt.bindLong(8, entity.getShop_pinNumber());
        stmt.bindLong(9, entity.getSale_number());
        stmt.bindLong(10, entity.getClassification());
        stmt.bindLong(11, entity.getArrival_time());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(13, phoneNumber);
        }
 
        String businessTime = entity.getBusinessTime();
        if (businessTime != null) {
            stmt.bindString(14, businessTime);
        }
 
        String briefIntroduction = entity.getBriefIntroduction();
        if (briefIntroduction != null) {
            stmt.bindString(15, briefIntroduction);
        }
 
        String benefit = entity.getBenefit();
        if (benefit != null) {
            stmt.bindString(16, benefit);
        }
        stmt.bindLong(17, entity.getShop_star_imagineId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getImageId());
 
        String shop_name = entity.getShop_name();
        if (shop_name != null) {
            stmt.bindString(3, shop_name);
        }
        stmt.bindDouble(4, entity.getShop_score());
        stmt.bindDouble(5, entity.getDistance_desc());
        stmt.bindDouble(6, entity.getPrice_limit_desc());
        stmt.bindDouble(7, entity.getPrice_trans_desc());
        stmt.bindLong(8, entity.getShop_pinNumber());
        stmt.bindLong(9, entity.getSale_number());
        stmt.bindLong(10, entity.getClassification());
        stmt.bindLong(11, entity.getArrival_time());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(13, phoneNumber);
        }
 
        String businessTime = entity.getBusinessTime();
        if (businessTime != null) {
            stmt.bindString(14, businessTime);
        }
 
        String briefIntroduction = entity.getBriefIntroduction();
        if (briefIntroduction != null) {
            stmt.bindString(15, briefIntroduction);
        }
 
        String benefit = entity.getBenefit();
        if (benefit != null) {
            stmt.bindString(16, benefit);
        }
        stmt.bindLong(17, entity.getShop_star_imagineId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShopEntity readEntity(Cursor cursor, int offset) {
        ShopEntity entity = new ShopEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // imageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shop_name
            cursor.getDouble(offset + 3), // shop_score
            cursor.getDouble(offset + 4), // distance_desc
            cursor.getDouble(offset + 5), // price_limit_desc
            cursor.getDouble(offset + 6), // price_trans_desc
            cursor.getInt(offset + 7), // shop_pinNumber
            cursor.getInt(offset + 8), // sale_number
            cursor.getInt(offset + 9), // classification
            cursor.getInt(offset + 10), // arrival_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phoneNumber
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // businessTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // briefIntroduction
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // benefit
            cursor.getInt(offset + 16) // shop_star_imagineId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImageId(cursor.getInt(offset + 1));
        entity.setShop_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShop_score(cursor.getDouble(offset + 3));
        entity.setDistance_desc(cursor.getDouble(offset + 4));
        entity.setPrice_limit_desc(cursor.getDouble(offset + 5));
        entity.setPrice_trans_desc(cursor.getDouble(offset + 6));
        entity.setShop_pinNumber(cursor.getInt(offset + 7));
        entity.setSale_number(cursor.getInt(offset + 8));
        entity.setClassification(cursor.getInt(offset + 9));
        entity.setArrival_time(cursor.getInt(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhoneNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBusinessTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBriefIntroduction(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBenefit(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShop_star_imagineId(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
